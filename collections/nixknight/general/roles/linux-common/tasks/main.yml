---
# tasks file for Ansible-LinuxCommon
- name: Change Host Name
  ansible.builtin.hostname:
    name: "{{ inventory_hostname_short }}"
  when: LC_CHANGE_HOSTNAME

- name: Replace Hosts File
  ansible.builtin.template:
    src: "templates/etc/hosts.j2"
    dest: "/etc/hosts"
  when: LC_CHANGE_HOSTNAME

- name: Remove Sources List File with Old Format
  ansible.builtin.file:
    path: "/etc/apt/sources.list"
    state: absent
  when: LC_CHANGE_APT_DEFAULT_SOURCES_LIST

- name: Setup Official Package Repositories
  ansible.builtin.template:
    src: "templates/etc/apt/sources.list.d/{{ ansible_distribution }}.sources.j2"
    dest: "/etc/apt/sources.list.d/{{ ansible_distribution | lower }}.sources"
  when: LC_CHANGE_APT_DEFAULT_SOURCES_LIST

- name: Add 3rd Party Repository Keys
  ansible.builtin.get_url:
    url: "{{ item.APT_KEY_URL }}"
    dest: "{{ item.APT_KEY_LOCAL_PATH }}"
  with_items: "{{ LC_THIRD_PARTY_REPOS }}"
  when: LC_SETUP_THIRD_PARTY_REPOS

- name: Setup 3rd Party Package Repositories
  ansible.builtin.template:
    src: "templates/etc/apt/sources.list.d/3rd_party.sources.j2"
    dest: "/etc/apt/sources.list.d/{{ item.NAME }}.sources"
  with_items: "{{ LC_THIRD_PARTY_REPOS }}"
  when: LC_SETUP_THIRD_PARTY_REPOS

- name: Install Updates
  ansible.builtin.apt:
    upgrade: dist
    update_cache: yes

- name: Remove Exim
  ansible.builtin.apt:
    name: "{{ lc_exim_packages }}"
    state: absent
    purge: yes
  when: LC_REMOVE_EXIM

- name: Gather Installed Package Facts
  ansible.builtin.package_facts:
    manager: apt

- name: Set debconf Values for Packages
  ansible.builtin.debconf:
    name: "{{ item.name }}"
    question: "{{ debconf_item.question }}"
    value: "{{ debconf_item.value }}"
    vtype: "{{ debconf_item.vtype }}"
  with_items: "{{ LC_PACKAGES_DEBCONF }}"
  vars:
    debconf_item: "{{ item.debconf_values }}"
  when: item.debconf_values is defined and item.debconf_values | length > 0
  register: debconf_setup

- name: Reconfigure Installed Packages Per debconf Changes
  ansible.builtin.command:
    cmd: "dpkg-reconfigure -f noninteractive {{ item }}"
  loop: "{{ LC_PACKAGES_DEBCONF | map(attribute='name') | unique | list }}"
  when: debconf_setup.changed and item in ansible_facts.packages

- name: Install Packages
  ansible.builtin.apt:
    pkg: "{{ lc_basic_packages + LC_EXTRA_PACKAGES + (LC_PACKAGES_DEBCONF | map(attribute='name') | unique | list) }}"
    state: present
    update_cache: yes
  when: LC_INSTALL_PACKAGES

- name: Install sudo
  ansible.builtin.apt:
    name: "sudo"
    state: present
    update_cache: yes
  when: LC_SETUP_SUDO

- name: Configure sudo Group Login Without Password
  ansible.builtin.template:
    src: "templates/etc/sudoers.d/95-sudo-group.j2"
    dest: "/etc/sudoers.d/95-sudo-group"
  when: LC_SETUP_SUDO

- name: Add User {{ ansible_user_id }} to sudo Group
  ansible.builtin.user:
    name: '{{ ansible_user_id }}'
    groups: "sudo"
    append: yes
  when: LC_SETUP_SUDO

- name: Create Additional Directories
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    recurse: true
  with_items: "{{ LC_ADDITIONAL_PATHS }}"

- name: Render Misc Template File(s)
  ansible.builtin.template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    mode: "{{ item.mode }}"
    owner: "{{ item.owner }}"
    group: "{{ item.group }}"
  with_items: "{{ LC_MISC_TEMPLATES }}"
  when: LC_MISC_TEMPLATES is defined and LC_MISC_TEMPLATES | length > 0

- name: Copy/Update Misc File(s)
  ansible.builtin.copy:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    mode: "{{ item.mode }}"
    owner: "{{ item.owner }}"
    group: "{{ item.group }}"
  with_items: "{{ LC_MISC_FILES }}"
  when: LC_MISC_FILES is defined and LC_MISC_FILES | length > 0

- name: Perform Systemd Service(s) Start/Restart Actions
  ansible.builtin.systemd_service:
    name: "{{ item.service_name }}"
    state: "{{ item.state }}"
    daemon_reload: "{{ item.daemon_reload | bool }}"
  with_items: "{{ LC_SYSTEMD_SERVICES_ACTIONS }}"

- name: Enable Certain Systemd Service(s)
  ansible.builtin.systemd_service:
    name: "{{ item.service_name }}"
    enabled: "{{ item.enabled | bool }}"
  with_items: "{{ LC_SYSTEMD_SERVICES_ACTIONS }}"

- name: Modify Kernel Parameters
  ansible.builtin.sysctl:
    name: "{{ item.name }}"
    value: "{{ item.value }}"
    state: "{{ item.state }}"
    reload: yes
  ignore_errors: true # We want to ignore errors if we are running in a chroot environment
  with_items: "{{ LC_KERNEL_PARAMETERS }}"
  when: LC_SET_KERNEL_PARAMETERS

- name: Reboot
  ansible.builtin.shell: sleep 2 && shutdown -r now "Rebooting..."
  async: 1
  poll: 0
  ignore_errors: True
  when: LC_REBOOT

- name: Wait for Server to Reboot
  become: False
  ansible.builtin.wait_for:
    host: "{{ ansible_host }}"
    port: "{{ LC_SSH_PORT }}"
    state: started
    search_regex: OpenSSH
    delay: 10
    timeout: "{{ LC_REBOOT_TIMEOUT }}"
  vars:
    ansible_connection: local
  when: LC_REBOOT
