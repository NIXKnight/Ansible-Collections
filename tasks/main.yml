---
# tasks file for Ansible-LinuxCommon
- name: Change Host Name
  hostname:
    name: "{{ inventory_hostname_short }}"
  when: CHANGE_HOSTNAME

- name: Replace Hosts File (Debian/Ubuntu)
  template:
    src: templates/hosts.j2
    dest: /etc/hosts
  when: (CHANGE_HOSTNAME)

- name: Replace bashrc (Debian/Ubuntu)
  copy:
    src: files/bash.bashrc
    dest: /etc/bash.bashrc
  when: ansible_os_family == 'Debian'

- name: Replace Skeleton profile (Debian/Ubuntu)
  copy:
    src: files/user-profile
    dest: /etc/skel/.profile
    owner: root
    group: root
  when: ansible_os_family == 'Debian'

- name: Replace root profile (Debian/Ubuntu)
  copy:
    src: files/root-profile
    dest: /root/.profile
    owner: root
    group: root
  when: ansible_os_family == 'Debian'

- name: Replace User profile (Debian/Ubuntu)
  copy:
    src: files/user-profile
    dest: /home/{{ ansible_ssh_user }}/.profile
    owner: "{{ ansible_ssh_user }}"
    group: "{{ ansible_ssh_user }}"
  when: ansible_os_family == 'Debian'

- name: Setup Official Package Repositories (Debian/Ubuntu)
  template:
    src: templates/{{ ansible_distribution }}.sources.list.j2
    dest: /etc/apt/sources.list
  when: ansible_os_family == 'Debian'

- name: Setup 3rd Party Package Repositories (Debian/Ubuntu)
  template:
    src: templates/3rd_party.list.j2
    dest: /etc/apt/sources.list.d/{{ item.NAME }}.list
  with_items: "{{ THIRD_PARTY_REPOS }}"
  when: (SETUP_THIRD_PARTY_REPOS) and (ansible_os_family == 'Debian')

- name: Add 3rd Party Repository Keys
  apt_key:
    url: "{{ item }}"
    state: present
  with_items: "{{ THIRD_PARTY_REPOS_KEYS }}"
  when: (SETUP_THIRD_PARTY_REPOS) and (ansible_os_family == 'Debian')

- name: Install Updates (Debian/Ubuntu)
  apt:
    upgrade: dist
    update_cache: yes
  when: ansible_os_family == 'Debian'

- name: Remove Exim (Debian/Ubuntu)
  apt:
    pkg: "{{ item }}"
    state: absent
    purge: yes
  with_items:
    - "{{ exim_packages }}"
  when: ansible_os_family == 'Debian'

- name: Install Packages
  apt:
    pkg: "{{ item }}"
    state: present
  with_items:
    - "{{ basic_packages }}"
    - "{{ EXTRA_PACKAGES }}"
  when: ansible_os_family == 'Debian'

- name: Install libpam-systemd (for Debian Jessie)
  apt:
    pkg: libpam-systemd
    state: present
  when: (ansible_os_family == 'Debian') and (ansible_distribution_release == 'jessie')

- name: Install sudo
  apt:
    pkg: sudo
    state: present
  when: (ansible_os_family == 'Debian') and (SETUP_SUDO)

- name: Configure sudo Group Login Without Password
  template:
    src: templates/95-sudo-group.j2
    dest: /etc/sudoers.d/95-sudo-group
  when: (ansible_os_family == 'Debian') and (SETUP_SUDO)

- name: Add User {{ ansible_ssh_user }} to sudo Group
  user:
    name: '{{ ansible_ssh_user }}'
    groups: sudo
    append: yes
  when: (ansible_os_family == 'Debian') and (SETUP_SUDO)

- name: Configure vim editor
  copy:
    src: files/vimrc.local
    dest: /etc/vim/vimrc.local
  when: ansible_os_family == 'Debian'

- name: Reboot
  shell: sleep 2 && shutdown -r now "Rebooting..."
  async: 1
  poll: 0
  ignore_errors: True
  when: REBOOT

- name: Wait for Reboot
  become: False
  connection: local
  local_action: wait_for
  args:
    host: "{{ ansible_ssh_host }}"
    port: "{{ ansible_port }}"
    state: started
    delay: 40
    timeout: "{{ REBOOT_TIMEOUT }}"
  when: REBOOT