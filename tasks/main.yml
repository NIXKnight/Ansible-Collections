---
# tasks file for Ansible-Docker-Compose-Service
- name: Write Docker Compose Service Helper Script
  ansible.builtin.copy:
    src: "files/usr/local/bin/docker-compose-service-helper.sh"
    dest: "/usr/local/bin/docker-compose-service-helper.sh"
    mode: 500

- name: Check if Docker Compose File Exists
  ansible.builtin.stat:
    path: "{{ DOCKER_COMPOSE_SERVICE_COMPOSE_PATH }}/docker-compose.yml"
  register: compose_dir_check

- name: Check for Running Containers
  ansible.builtin.shell: "/usr/local/bin/docker-compose-service-helper.sh --check-running-containers {{ DOCKER_COMPOSE_SERVICE_NAME }}"
  args:
    chdir: "{{ DOCKER_COMPOSE_SERVICE_COMPOSE_PATH }}"
    executable: "/bin/bash"
  register: check_running_containers
  when: compose_dir_check.stat.exists is defined and compose_dir_check.stat.exists

- name: Set Docker Group ID
  shell: "getent group docker | cut -d: -f3"
  register: docker_gid
  changed_when: false
  when: DOCKER_COMPOSE_SERVICE_SET_GROUP_ID

- name: Create Service Docker Compose Directory
  ansible.builtin.file:
    path: "{{ DOCKER_COMPOSE_SERVICE_COMPOSE_PATH }}"
    state: directory
    recurse: true
  when: (compose_dir_check.stat.isdir is not defined) and (DOCKER_COMPOSE_SERVICE_COMPOSE_PATH is defined and DOCKER_COMPOSE_SERVICE_COMPOSE_PATH | length > 0)

- name: Create Service Docker Compose Additional Directories
  ansible.builtin.file:
    path: "{{ DOCKER_COMPOSE_SERVICE_COMPOSE_PATH }}"
    state: directory
    recurse: true
  with_items: "{{ DOCKER_COMPOSE_SERVICE_ADDITIONAL_PATHS }}"

- name: Create Service Configuration Directory
  ansible.builtin.file:
    path: "{{ DOCKER_COMPOSE_SERVICE_CONFIG_PATH }}"
    state: directory
    recurse: true
  when: DOCKER_COMPOSE_SERVICE_CONFIG_PATH is defined and DOCKER_COMPOSE_SERVICE_CONFIG_PATH | length > 0

- name: Create a Docker Container Image Management Plan
  ansible.builtin.shell: "/usr/local/bin/docker-compose-service-helper.sh --create-image-mgmt-plan '{{ DOCKER_COMPOSE_SERVICE_IMAGES | to_json }}'"
  args:
    executable: "/bin/bash"
  register: container_image_mgmt_plan

- name: Stop Existing Service
  ansible.builtin.shell: "/usr/local/bin/docker-compose-service-helper.sh --stop-running-containers {{ DOCKER_COMPOSE_SERVICE_NAME }}"
  args:
    chdir: "{{ DOCKER_COMPOSE_SERVICE_COMPOSE_PATH }}"
    executable: "/bin/bash"
  when: (compose_dir_check.stat.exists is defined and compose_dir_check.stat.exists) and (check_running_containers is defined and (check_running_containers.stdout | from_json).running_containers | length > 0)

- name: Create/Update Service Docker Compose File
  ansible.builtin.template:
    src: "templates/docker-compose.yml.j2"
    dest: "{{ DOCKER_COMPOSE_SERVICE_MANIFEST.dest }}"
  register: service_compose_file

- name: Create/Update Systemd Service File
  ansible.builtin.template:
    src: "templates/etc/systemd/system/docker-compose.service.j2"
    dest: "{{ DOCKER_COMPOSE_SERVICE_SYSTEMD_FILE }}"
  register: service_systemd_file

- name: Create/Update Service Configuration File(s)
  ansible.builtin.template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    mode: "{{ item.mode }}"
    owner: "{{ item.owner }}"
    group: "{{ item.group }}"
  with_items: "{{ DOCKER_COMPOSE_SERVICE_CONFIG_FILES }}"
  register: service_config_files
  when: DOCKER_COMPOSE_SERVICE_CONFIG_FILES is defined and DOCKER_COMPOSE_SERVICE_CONFIG_FILES | length > 0

- name: Pull New Container Images
  community.docker.docker_image:
    name: "{{ item }}"
    source: pull
    state: present
  with_items: "{{ (container_image_mgmt_plan.stdout | from_json).images_to_pull }}"
  when: (container_image_mgmt_plan.stdout | from_json).images_to_pull | length > 0

- name: Remove Old Container Images
  community.docker.docker_image:
    name: "{{ item }}"
    state: absent
  with_items: "{{ (container_image_mgmt_plan.stdout | from_json).images_to_remove }}"
  when: (container_image_mgmt_plan.stdout | from_json).images_to_remove | length > 0

- name: Start Service(s)
  ansible.builtin.systemd_service:
    name: "{{ DOCKER_COMPOSE_SERVICE_NAME }}"
    state: started
    daemon_reload: true
  register: service_start

- name: Restart Service(s)
  ansible.builtin.systemd_service:
    name: "{{ DOCKER_COMPOSE_SERVICE_NAME }}"
    state: restarted
    daemon_reload: true
  when: (service_compose_file.changed or service_config_files.changed) and (not service_start.changed)

- name: Ensure Service(s) is Enabled
  ansible.builtin.systemd_service:
    name: "{{ DOCKER_COMPOSE_SERVICE_NAME }}"
    enabled: true

- name: Remove Docker Compose Service Helper Script
  ansible.builtin.file:
    path: "/usr/local/bin/docker-compose-service-helper.sh"
    state: absent
